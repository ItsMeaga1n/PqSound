/**
 * Module for constants variabes and enums
 * @module Constants
 */

/**
 * array of all 88 keys to help determine if specific key is black (1) or white (0)
 */
const keyNotes = [0, 1, 0];
for (let i = 0; i < 7; i++) {
    keyNotes.push(0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0);
}
keyNotes.push(0);
export { keyNotes };

export const oscillatorTypes = ['sine', 'square', 'sawtooth', 'triangle'];

/**
 * array of all 88 frequencies for each note starting from a0
 */
const keyFrequencies = [27.5];
const multipler = Math.pow(2, 1 / 12);
for (let i = 1; i < 89; i++) {
    keyFrequencies.push(keyFrequencies[i - 1] * multipler);
}
export { keyFrequencies };

/**
 * object containing all available note lengths
 */
export const noteLengths = {
    fullNote: { name: '1/1', id: 0 },
    halfNote: { name: '1/2', id: 1 },
    quarterNote: { name: '1/4', id: 2 },
    eighthNote: { name: '1/8', id: 3 },
    sixteenthNote: { name: '1/16', id: 4 },
};

/**
 * object containing all available tools
 */
export const tools = {
    draw: { name: 'Draw', id: 0 },
    select: { name: 'Select', id: 1 },
    remove: { name: 'Remove', id: 2 },
    copyPaste: { name: 'Copy / Paste', id: 3 },
};

/**
 * object constaining all available instruments
 */
export const Instruments = {
    Sampler: { name: 'Sampler', id: 0 },
    PqSynth: { name: 'PqSynth', id: 1 },
    Monotron: { name: 'Monotron', id: 2 },
    MultiOsc: { name: 'MultiOsc Synth', id: 3 },
};

export enum PluginsEnum {
    Compressor,
    Equalizer,
    Distortion,
    Delay,
    Reverb,
    Chorus,
}

export const Plugins = [
    {
        name: 'Compressor',
        id: PluginsEnum.Compressor,
    },
    {
        name: 'Equalizer',
        id: PluginsEnum.Equalizer,
    },
    {
        name: 'Distortion',
        id: PluginsEnum.Distortion,
    },
    {
        name: 'Delay',
        id: PluginsEnum.Delay,
    },
    {
        name: 'Reverb',
        id: PluginsEnum.Reverb,
    },
    {
        name: 'Chorus',
        id: PluginsEnum.Chorus,
    },
];

/**
 * enum of update actions
 */
export const updateActions = {
    solo: 0,
    mute: 1,
    recotd: 2,
    add: 3,
    remove: 4,
};

/**
 * enum of available track types
 */
export const TrackTypes = {
    virtualInstrument: 0,
    audio: 1,
    aux: 2,
};

/**
 * enum for determining how to handle stopping sound
 */
export const SoundOrigin = {
    composition: 0, //Sounds scheduled by sequencer
    pianoRollNote: 1, //Sounds generated by tweaking pianoRoll
    keyboard: 2, //Sounds generated by playing on keyboard
};

/**
 * widths in pixels for every piano key to determine if need to be displayed
 */
const keyboardWidths = [
    { sharp: false, startWidth: 0 },
    { sharp: true, startWidth: 47 },
    { sharp: false, startWidth: 66 },
];
const octaveKeysWidth = [
    { sharp: false, startWidth: 0 },
    { sharp: true, startWidth: 55 },
    { sharp: false, startWidth: 66 },
    { sharp: true, startWidth: 123 },
    { sharp: false, startWidth: 122 },
    { sharp: false, startWidth: 198 },
    { sharp: true, startWidth: 254 },
    { sharp: false, startWidth: 264 },
    { sharp: true, startWidth: 322 },
    { sharp: false, startWidth: 330 },
    { sharp: true, startWidth: 389 },
    { sharp: false, startWidth: 396 },
];
for (let i = 0; i < 7; i++) {
    for (let j = 0; j < 12; j++) {
        keyboardWidths.push({
            sharp: octaveKeysWidth[j].sharp,
            startWidth: octaveKeysWidth[j].startWidth + 122 + i * 462,
        });
    }
}
keyboardWidths.push({ sharp: false, startWidth: keyboardWidths[86].startWidth + 66 });
export { keyboardWidths };

/**
 * List of strings representing each of 88 notes musical notation for displaying purpose
 */
const keys = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];
const defaultKeysNames = ['A0', 'A#0', 'B0'];
for (let i = 0; i < 7; i++) {
    for (let j = 0; j < keys.length; j++) {
        defaultKeysNames.push(keys[j] + (i + 1).toString());
    }
}
defaultKeysNames.push('C8');
export { defaultKeysNames };

const defaultKeysNamesNoOctaveNumber = ['A', 'A#', 'B'];
for (let i = 0; i < 7; i++) {
    for (let j = 0; j < keys.length; j++) {
        defaultKeysNamesNoOctaveNumber.push(keys[j]);
    }
}
defaultKeysNamesNoOctaveNumber.push('C');

export { defaultKeysNamesNoOctaveNumber };

export const defaultKeyBindings = [
    { MIDINote: 45, keyboardKey: 'q' },
    { MIDINote: 46, keyboardKey: '2' },
    { MIDINote: 47, keyboardKey: 'w' },
    { MIDINote: 48, keyboardKey: 'e' },
    { MIDINote: 49, keyboardKey: '4' },
    { MIDINote: 50, keyboardKey: 'r' },
    { MIDINote: 51, keyboardKey: '5' },
    { MIDINote: 52, keyboardKey: 't' },
    { MIDINote: 53, keyboardKey: 'y' },
    { MIDINote: 54, keyboardKey: '7' },
    { MIDINote: 55, keyboardKey: 'u' },
    { MIDINote: 56, keyboardKey: '8' },
    { MIDINote: 57, keyboardKey: 'i' },
    { MIDINote: 58, keyboardKey: '9' },
    { MIDINote: 59, keyboardKey: 'o' },
    { MIDINote: 60, keyboardKey: 'z' },
    { MIDINote: 61, keyboardKey: 's' },
    { MIDINote: 62, keyboardKey: 'x' },
    { MIDINote: 63, keyboardKey: 'd' },
    { MIDINote: 64, keyboardKey: 'c' },
    { MIDINote: 65, keyboardKey: 'v' },
    { MIDINote: 66, keyboardKey: 'g' },
    { MIDINote: 67, keyboardKey: 'b' },
    { MIDINote: 68, keyboardKey: 'h' },
    { MIDINote: 69, keyboardKey: 'n' },
    { MIDINote: 70, keyboardKey: 'j' },
    { MIDINote: 71, keyboardKey: 'm' },
    { MIDINote: 72, keyboardKey: ',' },
    { MIDINote: 73, keyboardKey: 'l' },
    { MIDINote: 74, keyboardKey: '.' },
    { MIDINote: 75, keyboardKey: ';' },
    { MIDINote: 76, keyboardKey: '/' },
];
